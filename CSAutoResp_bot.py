import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
TELEGRAM_BOT_TOKEN ="8472115288:AAE4_l0rrrhNSeiGgjwZ_BAU6HUu0ConVTE"
FAQ = {
    "ูุชู ุชุฃุณุณุช ุดุฑูุฉ Clear Smile ุ": "ุชุฃุณุณุช ุดุฑูุฉ Clear Smile ุนุงู 2016 ูุฃูู ุดุฑูุฉ ูุฎุชุตุฉ ุจุชุตููุน ุงูุตูุงุฆุญ ุงูุดูุงูุฉ (Aligners) ูู ุณูุฑูุง ูุงูููุทูุฉุ ูุนุชูุฏุฉ ุนูู ุฃุญุฏุซ ุชูููุงุช ุงูุชุตููู ูุงูุทุจุงุนุฉ ุงูุฑูููุฉ.",
    "ููู ูุนูู ุงูุชูููู ุงูุดูุงู Clear Smile ุ": "ูุนูู ูู ุฎูุงู ุณูุณูุฉ ุตูุงุฆุญ ุดูุงูุฉ ูุชุณูุณูุฉ ุชูุตูู ุฎุตูุตุงู ููู ูุฑูุถ ูุชุญุฑูู ุงูุฃุณูุงู ุชุฏุฑูุฌูุงู ุจุฎุทูุงุช ูุฏุฑูุณุฉ ุญุชู ุงููุตูู ููุงุจุชุณุงูุฉ ุงููุซุงููุฉ.",
    "ูุง ูู ูุฑุงุญู ุงููุนุงูุฌุฉ ุจุงูุชูููู ุงูุดูุงู Clear Smile ุ": "1. ุฃุฎุฐ ุงูุทุจุนุฉ:\nโข ุฅูุง ุทุจุนุฉ ุฑูููุฉ (Intra-Oral Scan)\nโข ุฃู ุทุจุนุฉ ุณูููููู ูุทุงุท (ูุงุณู ู ุฑุฎู)\n2. ุฅุนุฏุงุฏ ุฎุทุฉ ุนูุงุฌ ุฑูููุฉ ุซูุงุซูุฉ ุงูุฃุจุนุงุฏ.\n3. ุฅุฑุณุงู ุงูุฎุทุฉ ููุทุจูุจ ุงููุนุงูุฌ ุนุจุฑ ุงูุฅูููู (ุชุชุถูู ุงูุญุฑูุงุช ุงููุทููุจุฉ ูุงููุฏุฉ ุงูุชูุฏูุฑูุฉ).\n4. ุจุนุฏ ููุงููุฉ ุงูุทุจูุจ ูุชู ุชุตููุน ุณูุณูุฉ ุงูุตูุงุฆุญ ููู ูุฑุญูุฉ.",
    "ูุง ูู Clear Smile Pro ุ": "Clear Smile Pro ูู ูุธุงู ูุชุทูุฑ ูู Clear Smile ูุนุชูุฏ ุนูู ุตูุงุฆุญ ูุคููุฉ ูู ุซูุงุซ ุทุจูุงุช:\nโข ูุฑููุฉ ุฃุนูู ูุฒูุงุฏุฉ ูุนุงููุฉ ุญุฑูุฉ ุงูุฃุณูุงู\nโข ููุงููุฉ ุฃูุจุฑ ููุชุตุฏุน ูุงููุณุฑ\nโข ุฑุงุญุฉ ุฃูุถู ูููุฑูุถ\nโข ุฃุณุฑุน ูู ุงููุธุงู ุงูุนุงุฏู",
    "ูุง ุงููุฑู ุจูู Clear Smile ู Clear Smile Pro ุ": "๐น Clear Smile ุงูุนุงุฏู\nโข ูุธุงู: 3 ุตูุงุฆุญ ููู ูุฑุญูุฉ\nโข ูุฏุฉ ุงููุฑุญูุฉ: ุดูุฑ ูุงูู\nโข ูู ุตููุญุฉ ููุง ููุช ูุญุฏุฏ ููุงุฑุชุฏุงุก (7-14 ููู)\nโข ุงูุตูุงุฆุญ ูุคููุฉ ูู ุทุจูุฉ ูุงุญุฏุฉ\n\n๐น Clear Smile Pro\nโข ูุธุงู: 2 ุตููุญุฉ ููู ูุฑุญูุฉ\nโข ูุฏุฉ ุงููุฑุญูุฉ: 20 ููู ููุท (ูู ุตููุญุฉ ุญูุงูู 10 ุฃูุงู)\nโข ุงูุตูุงุฆุญ ูุคููุฉ ูู ูุงุฏุฉ ุซูุงุซูุฉ ุงูุทุจูุงุช (ูุฑููุฉ ุฃุนูู โ ููุงููุฉ ูููุณุฑ ูุงูุชุตุฏุน โ ุฑุงุญุฉ ุฃูุจุฑ)\nโข ุฃุณุฑุน ูุฃูุซุฑ ูุนุงููุฉ",
    "ุฃูู ุฃุฌุฏ Clear Smile ุ": "ูุชููุฑ ุญุตุฑุงู ุนู ุทุฑูู ุงูุนูุงุฏุงุช ูุงููุฑุงูุฒ ุงููุนุชูุฏุฉ ูุฏู ุงูุดุฑูุฉุ ููุง ูููู ุดุฑุงุคู ูุจุงุดุฑุฉ ูู ูุจู ุงููุฑูุถ.",
    "ูู ุงูุทุจูุจ ุงูุฐู ูุนุงูุฌ ุจู Clear Smile ุ": "ุงูุนูุงุฌ ููุฏููู ุญุตุฑุงู ูู ุฎูุงู ุฃุฎุตุงุฆู ุชูููู ูุนุชูุฏ ูู ุดุฑูุฉ Clear Smile.",
    "ูุง ูุฏุฉ ูุฒูู ุงููุนุงูุฌุฉ ุจู Clear Smile ุ": "โข ุญุงูุงุช ุจุณูุทุฉ: 6 โ 8 ุฃุดูุฑ\nโข ุญุงูุงุช ูุชูุณุทุฉ: ุญุชู 12 ุดูุฑ\nโข ุญุงูุงุช ูุนูุฏุฉ: ูุฏ ุชุตู ุฅูู 18 โ 24 ุดูุฑ",
    "ูุง ุชูููุฉ ุงููุนุงูุฌุฉ ุจู Clear Smile ุ": "ุงูุชูููุฉ ุงูููุงุฆูุฉ ุชุฎุชูู ุญุณุจ ุงูุญุงูุฉ ูุญุณุจ ุฎุทุฉ ูุชูุฏูุฑ ุงูุทุจูุจ ุงููุนุงูุฌ.",
    "ูู ุงููุนุงูุฌุฉ ูุคููุฉ ุ": "ูุง ุชุณุจุจ ุฃูู ุดุฏูุฏุ ููุท ุฅุญุณุงุณ ุฎููู ุจุงูุถุบุท ุฃู ุงูุดุฏ ุนูุฏ ุชุจุฏูู ุงูุตููุญุฉุ ููู ุทุจูุนู ููุฏู ุนูู ุฃู ุงูุฃุณูุงู ุชุชุญุฑู ุจุดูู ุตุญูุญ.",
    "ูุง ุงูุญุงูุงุช ุงูุชู ูุนุงูุฌูุง Clear Smile ุ": "โ ุงูุนุถุฉ ุงููุนููุณุฉ\nโ ุงูุชุฑุงูุจ ูุงูุงุฒุฏุญุงู\nโ ุงูุจุฑูุฒ ุงูุฃูุงูู\nโ ุงููุณุงูุงุช ูุงููุฑุงุบุงุช\nโ ุงูุนุถุฉ ุงูููุชูุญุฉ\nโ ุฃุบูุจ ุญุงูุงุช ุณูุก ุงูุฅุทุจุงู\n\nุงูุญุงูุงุช ุงูุฃูุซุฑ ุดููุนุงู:\nโ ุงูุชุญุถูุฑ ุงูุชููููู ูุจู ุงููุนุงูุฌุงุช ุงูุชุฌููููุฉ\nโ ุงูุชุญุถูุฑ ุงูุชููููู ูุจู ุฒุฑุน ุงูุฃุณูุงู\nโ ุฑุตู ุชููููู ูุฃุณูุงู ูุญุฏุฏุฉ\nโ ุฑุตู ุชููููู ููู ูุงุญุฏ",
}

# ุชุฎุฒูู ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ
unanswered_questions = []

# ูุนุฑู ุงููุณุคูู (ุณูุชู ุชุนูููู ุชููุงุฆูุงู ุนูุฏ ุงุณุชุฎุฏุงู ุงูุฃูุฑ /setadmin)
ADMIN_ID = 7502265872

# ุฅูุดุงุก ููุญุฉ ุงูููุงุชูุญ ูุน ุงูุฃุณุฆูุฉ
def create_faq_keyboard():
    questions = list(FAQ.keys())
    keyboard = [questions[i:i+2] for i in range(0, len(questions), 2)]
    keyboard.append(["ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="ุงุฎุชุฑ ุณุคุงูุงู ูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_faq_keyboard()
    await update.message.reply_text(
        "ูุฑุญุจุง ุจู ูู ClearSmile bot, ูุฐู ุจุนุถ ุงูุงุณุฆูุฉ ุงูุดุงุฆุนุฉ  \n"
        "ููู ูููููู ูุณุงุนุฏุชู ุ",
        reply_markup=keyboard
    )

async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text.strip()
    
    if question == "ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ":
        await update.message.reply_text(
            "ุชู ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ. ุงูุชุจ /start ูุฅุนุงุฏุฉ ูุชุญูุง.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
        
    if question in FAQ:
        await update.message.reply_text(FAQ[question])
    else:
        user = update.message.from_user
        user_info = f"{user.first_name} {user.last_name or ''} (@{user.username or 'ูุง ููุฌุฏ'})"
        unanswered_questions.append({
            "question": question,
            "user_info": user_info,
            "user_id": user.id
        })
        
        await update.message.reply_text(
            " ุชู ุงุฑุณุงู ุณุคุงูู ุงูู ุงููุณุคูู, ุณูุชู ุงูุงุฌุงุจุฉ ุนูู ุณุคุงูู ูู ุงูุฑุจ ููุช ูููู "
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = create_faq_keyboard()
    await update.message.reply_text(
        "ุงุฎุชุฑ ุฃุญุฏ ุงูุฃุณุฆูุฉ ุงูุชุงููุฉ:",
        reply_markup=keyboard
    )

async def cancel_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ุชู ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ. ุงูุชุจ /start ูุฅุนุงุฏุฉ ูุชุญูุง.",
        reply_markup=ReplyKeyboardRemove()
    )

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    await update.message.reply_text(
        f"ูุนุฑูู ูู: {user_id}\n\n"
        f"ุงูุงุณู: {user.first_name} {user.last_name or ''}\n"
        f"ุงุณู ุงููุณุชุฎุฏู: @{user.username or 'ูุง ููุฌุฏ'}"
    )

async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    user_id = update.message.from_user.id
    ADMIN_ID = user_id
    await update.message.reply_text(
        f"ุชู ุชุนูููู ููุณุคูู! ูุนุฑู ุงููุณุคูู ุงูุขู: {ADMIN_ID}\n\n"
        "ููููู ุงุณุชุฎุฏุงู ุงูุฃูุงูุฑ ุงูุชุงููุฉ:\n"
        "/unanswered - ุฑุคูุฉ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ\n"
        "/clear_unanswered - ูุณุญ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ"
    )

async def get_unanswered_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    if not unanswered_questions:
        await update.message.reply_text("ูุง ุชูุฌุฏ ุฃุณุฆูุฉ ุบูุฑ ูุฌุงุจุฉ ุญุงููุงู.")
        return
    
    message = "ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ:\n\n"
    for i, item in enumerate(unanswered_questions, 1):
        message += f"{i}. ุงูุณุคุงู: {item['question']}\n   ูู: {item['user_info']} (ID: {item['user_id']})\n\n"
    
    await update.message.reply_text(message)

async def clear_unanswered_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    global unanswered_questions
    count = len(unanswered_questions)
    unanswered_questions = []
    
    await update.message.reply_text(f"ุชู ูุณุญ {count} ุณุคุงู ุบูุฑ ูุฌุงุจ.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    # ุงูุญุตูู ุนูู ุงูุชููู ูู ูุชุบูุฑ ุงูุจูุฆุฉ (ูุทููุจ ูููุดุฑ ุนูู ุงูููุตุงุช ุงูุณุญุงุจูุฉ)
    # ุงุณุชุฎุฏู ุงุณู ูุชุบูุฑ ุซุงุจุช ูููุณ ุงูุชููู ููุณู!
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not token:
        # ูุฎูุงุฑ ุซุงูููุ ููููู ูุถุน ุงูุชููู ูุจุงุดุฑุฉ ููุง (ุบูุฑ ุขูู)
        # ูููู ูุฌุจ ุนููู ุฅุจุทุงู ูุฐุง ุงูุชููู ููุฑุงู ูุฃูู ูุนุฑุถ ุงูุขู!
        token = "8472115288:AAE4_l0rrrhNSeiGgjwZ_BAU6HUu0ConVTE"
    
    if not token:
        raise RuntimeError("ุงูุฑุฌุงุก ูุถุน ุชููู ุงูุจูุช ูู ูุชุบูุฑ ุงูุจูุฆุฉ TELEGRAM_BOT_TOKEN")
    
    # ุจูุงุก ุงูุชุทุจูู
    application = ApplicationBuilder().token(token).build()
    
    # ุฅุถุงูุฉ handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("cancel", cancel_keyboard))
    application.add_handler(CommandHandler("myid", get_my_id))
    application.add_handler(CommandHandler("unanswered", get_unanswered_questions))
    application.add_handler(CommandHandler("clear_unanswered", clear_unanswered_questions))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer))
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ุงูุฃุฎุทุงุก
    application.add_error_handler(error_handler)
    
    # ุจุฏุก ุงูุจูุช
    logger.info("ุงูุจูุช ูุนูู...")
    application.run_polling()

if __name__ == "__main__":
    main()