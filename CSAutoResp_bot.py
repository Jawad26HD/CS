import os
import logging
import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ุงูุชููู ูุฌุจ ุฃู ูููู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ูุฃุณุจุงุจ ุฃูููุฉ
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '8472115288:AAE4_l0rrrhNSeiGgjwZ_BAU6HUu0ConVTE')

# ููู ุชุฎุฒูู ุจูุงูุงุช ุงููุณุชุฎุฏููู
USER_DATA_FILE = "user_data.json"

FAQ = {
    "ูุชู ุชุฃุณุณุช ุดุฑูุฉ Clear Smile ุ": "ุชุฃุณุณุช ุดุฑูุฉ Clear Smile ุนุงู 2016 ูุฃูู ุดุฑูุฉ ูุฎุชุตุฉ ุจุชุตููุน ุงูุตูุงุฆุญ ุงูุดูุงูุฉ (Aligners) ูู ุณูุฑูุง ูุงูููุทูุฉุ ูุนุชูุฏุฉ ุนูู ุฃุญุฏุซ ุชูููุงุช ุงูุชุตููู ูุงูุทุจุงุนุฉ ุงูุฑูููุฉ.",
    "ููู ูุนูู ุงูุชูููู ุงูุดูุงู Clear Smile ุ": "ูุนูู ูู ุฎูุงู ุณูุณูุฉ ุตูุงุฆุญ ุดูุงูุฉ ูุชุณูุณูุฉ ุชูุตูู ุฎุตูุตุงู ููู ูุฑูุถ ูุชุญุฑูู ุงูุฃุณูุงู ุชุฏุฑูุฌูุงู ุจุฎุทูุงุช ูุฏุฑูุณุฉ ุญุชู ุงููุตูู ููุงุจุชุณุงูุฉ ุงููุซุงููุฉ.",
    "ูุง ูู ูุฑุงุญู ุงููุนุงูุฌุฉ ุจุงูุชูููู ุงูุดูุงู Clear Smile ุ": "1. ุฃุฎุฐ ุงูุทุจุนุฉ:\nโข ุฅูุง ุทุจุนุฉ ุฑูููุฉ (Intra-Oral Scan)\nโข ุฃู ุทุจุนุฉ ุณูููููู ูุทุงุท (ูุงุณู ู ุฑุฎู)\n2. ุฅุนุฏุงุฏ ุฎุทุฉ ุนูุงุฌ ุฑูููุฉ ุซูุงุซูุฉ ุงูุฃุจุนุงุฏ.\n3. ุฅุฑุณุงู ุงูุฎุทุฉ ููุทุจูุจ ุงููุนุงูุฌ ุนุจุฑ ุงูุฅูููู (ุชุชุถูู ุงูุญุฑูุงุช ุงููุทููุจุฉ ูุงููุฏุฉ ุงูุชูุฏูุฑูุฉ).\n4. ุจุนุฏ ููุงููุฉ ุงูุทุจูุจ ูุชู ุชุตููุน ุณูุณูุฉ ุงูุตูุงุฆุญ ููู ูุฑุญูุฉ.",
    "ูุง ูู Clear Smile Pro ุ": "Clear Smile Pro ูู ูุธุงู ูุชุทูุฑ ูู Clear Smile ูุนุชูุฏ ุนูู ุตูุงุฆุญ ูุคููุฉ ูู ุซูุงุซ ุทุจูุงุช:\nโข ูุฑููุฉ ุฃุนูู ูุฒูุงุฏุฉ ูุนุงููุฉ ุญุฑูุฉ ุงูุฃุณูุงู\nโข ููุงููุฉ ุฃูุจุฑ ููุชุตุฏุน ูุงููุณุฑ\nโข ุฑุงุญุฉ ุฃูุถู ูููุฑูุถ\nโข ุฃุณุฑุน ูู ุงููุธุงู ุงูุนุงุฏู",
    "ูุง ุงููุฑู ุจูู Clear Smile ู Clear Smile Pro ุ": "๐น Clear Smile ุงูุนุงุฏู\nโข ูุธุงู: 3 ุตูุงุฆุญ ููู ูุฑุญูุฉ\nโข ูุฏุฉ ุงููุฑุญูุฉ: ุดูุฑ ูุงูู\nโข ูู ุตููุญุฉ ููุง ููุช ูุญุฏุฏ ููุงุฑุชุฏุงุก (7-14 ููู)\nโข ุงูุตูุงุฆุญ ูุคููุฉ ูู ุทุจูุฉ ูุงุญุฏุฉ\n\n๐น Clear Smile Pro\nโข ูุธุงู: 2 ุตููุญุฉ ููู ูุฑุญูุฉ\nโข ูุฏุฉ ุงููุฑุญูุฉ: 20 ููู ููุท (ูู ุตููุญุฉ ุญูุงูู 10 ุฃูุงู)\nโข ุงูุตูุงุฆุญ ูุคููุฉ ูู ูุงุฏุฉ ุซูุงุซูุฉ ุงูุทุจูุงุช (ูุฑููุฉ ุฃุนูู โ ููุงููุฉ ูููุณุฑ ูุงูุชุตุฏุน โ ุฑุงุญุฉ ุฃูุจุฑ)\nโข ุฃุณุฑุน ูุฃูุซุฑ ูุนุงููุฉ",
    "ุฃูู ุฃุฌุฏ Clear Smile ุ": "ูุชููุฑ ุญุตุฑุงู ุนู ุทุฑูู ุงูุนูุงุฏุงุช ูุงููุฑุงูุฒ ุงููุนุชูุฏุฉ ูุฏู ุงูุดุฑูุฉุ ููุง ูููู ุดุฑุงุคู ูุจุงุดุฑุฉ ูู ูุจู ุงููุฑูุถ.",
    "ูู ุงูุทุจูุจ ุงูุฐู ูุนุงูุฌ ุจู Clear Smile ุ": "ุงูุนูุงุฌ ููุฏููู ุญุตุฑุงู ูู ุฎูุงู ุฃุฎุตุงุฆู ุชูููู ูุนุชูุฏ ูู ุดุฑูุฉ Clear Smile.",
    "ูุง ูุฏุฉ ูุฒูู ุงููุนุงูุฌุฉ ุจู Clear Smile ุ": "โข ุญุงูุงุช ุจุณูุทุฉ: 6 โ 8 ุฃุดูุฑ\nโข ุญุงูุงุช ูุชูุณุทุฉ: ุญุชู 12 ุดูุฑ\nโข ุญุงูุงุช ูุนูุฏุฉ: ูุฏ ุชุตู ุฅูู 18 โ 24 ุดูุฑ",
    "ูุง ุชูููุฉ ุงููุนุงูุฌุฉ ุจู Clear Smile ุ": "ุงูุชูููุฉ ุงูููุงุฆูุฉ ุชุฎุชูู ุญุณุจ ุงูุญุงูุฉ ูุญุณุจ ุฎุทุฉ ูุชูุฏูุฑ ุงูุทุจูุจ ุงููุนุงูุฌ.",
    "ูู ุงููุนุงูุฌุฉ ูุคููุฉ ุ": "ูุง ุชุณุจุจ ุฃูู ุดุฏูุฏุ ููุท ุฅุญุณุงุณ ุฎููู ุจุงูุถุบุท ุฃู ุงูุดุฏ ุนูุฏ ุชุจุฏูู ุงูุตููุญุฉุ ููู ุทุจูุนู ููุฏู ุนูู ุฃู ุงูุฃุณูุงู ุชุชุญุฑู ุจุดูู ุตุญูุญ.",
    "ูุง ุงูุญุงูุงุช ุงูุชู ูุนุงูุฌูุง Clear Smile ุ": "โ ุงูุนุถุฉ ุงููุนููุณุฉ\nโ ุงูุชุฑุงูุจ ูุงูุงุฒุฏุญุงู\nโ ุงูุจุฑูุฒ ุงูุฃูุงูู\nโ ุงููุณุงูุงุช ูุงููุฑุงุบุงุช\nโ ุงูุนุถุฉ ุงูููุชูุญุฉ\nโ ุฃุบูุจ ุญุงูุงุช ุณูุก ุงูุฅุทุจุงู\n\nุงูุญุงูุงุช ุงูุฃูุซุฑ ุดููุนุงู:\nโ ุงูุชุญุถูุฑ ุงูุชููููู ูุจู ุงููุนุงูุฌุงุช ุงูุชุฌููููุฉ\nโ ุงูุชุญุถูุฑ ุงูุชููููู ูุจู ุฒุฑุน ุงูุฃุณูุงู\nโ ุฑุตู ุชููููู ูุฃุณูุงู ูุญุฏุฏุฉ\nโ ุฑุตู ุชููููู ููู ูุงุญุฏ",
}

# ุชุฎุฒูู ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ
unanswered_questions = []

# ูุนุฑู ุงููุณุคูู (ุณูุชู ุชุนูููู ุชููุงุฆูุงู ุนูุฏ ุงุณุชุฎุฏุงู ุงูุฃูุฑ /setadmin)
ADMIN_ID = None

# ุชุญููู ุจูุงูุงุช ุงููุณุชุฎุฏููู ูู ุงูููู
def load_user_data():
    try:
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุญููู ุจูุงูุงุช ุงููุณุชุฎุฏููู: {e}")
    return {}

# ุญูุธ ุจูุงูุงุช ุงููุณุชุฎุฏููู ุฅูู ุงูููู
def save_user_data(user_data):
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุญูุธ ุจูุงูุงุช ุงููุณุชุฎุฏููู: {e}")

# ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
def update_user_data(user):
    user_data = load_user_data()
    user_id = str(user.id)
    
    if user_id not in user_data:
        user_data[user_id] = {
            "first_name": user.first_name,
            "last_name": user.last_name or "",
            "username": user.username or "",
            "language_code": user.language_code or "",
            "is_bot": user.is_bot,
            "interaction_count": 0,
            "last_interaction": None
        }
    else:
        user_data[user_id]["interaction_count"] += 1
    
    # ุชุญุฏูุซ ูุนูููุงุช ุงููุณุชุฎุฏู ุฅุฐุง ุชุบูุฑุช
    user_data[user_id]["first_name"] = user.first_name
    user_data[user_id]["last_name"] = user.last_name or ""
    user_data[user_id]["username"] = user.username or ""
    
    save_user_data(user_data)
    return user_data[user_id]

# ุฅูุดุงุก ููุญุฉ ุงูููุงุชูุญ ูุน ุงูุฃุณุฆูุฉ
def create_faq_keyboard():
    questions = list(FAQ.keys())
    keyboard = [questions[i:i+2] for i in range(0, len(questions), 2)]
    keyboard.append(["ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, input_field_placeholder="ุงุฎุชุฑ ุณุคุงูุงู ูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
    update_user_data(update.message.from_user)
    
    keyboard = create_faq_keyboard()
    await update.message.reply_text(
        "ูุฑุญุจุง ุจู ูู ClearSmile bot, ูุฐู ุจุนุถ ุงูุงุณุฆูุฉ ุงูุดุงุฆุนุฉ  \n"
        "ููู ูููููู ูุณุงุนุฏุชู ุ",
        reply_markup=keyboard
    )

async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
    update_user_data(update.message.from_user)
    
    # ุงูุชุญูู ุฃููุงู ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุณุคููุงู ููุญุงูู ุงูุฑุฏ ุนูู ูุณุชุฎุฏู ุขุฎุฑ
    global ADMIN_ID
    if ADMIN_ID and update.effective_user.id == ADMIN_ID and 'replying_to' in context.user_data:
        await handle_admin_reply(update, context)
        return
        
    question = update.message.text.strip()
    
    if question == "ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ":
        await update.message.reply_text(
            "ุชู ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ. ุงูุชุจ /start ูุฅุนุงุฏุฉ ูุชุญูุง.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
        
    if question in FAQ:
        await update.message.reply_text(FAQ[question])
    else:
        user = update.message.from_user
        user_info = f"{user.first_name} {user.last_name or ''} (@{user.username or 'ูุง ููุฌุฏ'})"
        user_data = {
            "question": question,
            "user_info": user_info,
            "user_id": user.id,
            "message_id": update.message.message_id,
            "chat_id": update.message.chat_id
        }
        unanswered_questions.append(user_data)
        
        # ุฅุฑุณุงู ุฅุดุนุงุฑ ูููุณุคูู
        if ADMIN_ID:
            try:
                keyboard = [
                    [InlineKeyboardButton("ุงูุฑุฏ ุนูู ุงูุณุคุงู", callback_data=f"reply_{user.id}")],
                    [InlineKeyboardButton("ุชุฌุงูู ุงูุณุคุงู", callback_data=f"ignore_{user.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                admin_message = (
                    f"โ ุณุคุงู ุฌุฏูุฏ ูู ุงููุณุชุฎุฏู:\n\n"
                    f"๐ค ุงููุณุชุฎุฏู: {user_info}\n"
                    f"๐ ุงููุนุฑู: {user.id}\n"
                    f"๐ ุงูุณุคุงู: {question}\n\n"
                )
                await context.bot.send_message(
                    chat_id=ADMIN_ID, 
                    text=admin_message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"ูุดู ูู ุฅุฑุณุงู ุงูุฅุดุนุงุฑ ูููุณุคูู: {e}")
        
        await update.message.reply_text(
            "ุชู ุงุฑุณุงู ุณุคุงูู ุงูู ุงููุณุคูู, ุณูุชู ุงูุงุฌุงุจุฉ ุนูู ุณุคุงูู ูู ุงูุฑุจ ููุช ูููู"
        )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
    update_user_data(update.message.from_user)
    
    keyboard = create_faq_keyboard()
    await update.message.reply_text(
        "ุงุฎุชุฑ ุฃุญุฏ ุงูุฃุณุฆูุฉ ุงูุชุงููุฉ:",
        reply_markup=keyboard
    )

async def cancel_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
    update_user_data(update.message.from_user)
    
    await update.message.reply_text(
        "ุชู ุฅุบูุงู ููุญุฉ ุงูููุงุชูุญ. ุงูุชุจ /start ูุฅุนุงุฏุฉ ูุชุญูุง.",
        reply_markup=ReplyKeyboardRemove()
    )

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
    update_user_data(update.message.from_user)
    
    user = update.message.from_user
    user_id = user.id
    await update.message.reply_text(
        f"ูุนุฑูู ูู: {user_id}\n\n"
        f"ุงูุงุณู: {user.first_name} {user.last_name or ''}\n"
        f"ุงุณู ุงููุณุชุฎุฏู: @{user.username or 'ูุง ููุฌุฏ'}"
    )

async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ุชุญุฏูุซ ุจูุงูุงุช ุงููุณุชุฎุฏู
    update_user_data(update.message.from_user)
    
    global ADMIN_ID
    user_id = update.message.from_user.id
    ADMIN_ID = user_id
    await update.message.reply_text(
        f"ุชู ุชุนูููู ููุณุคูู! ูุนุฑู ุงููุณุคูู ุงูุขู: {ADMIN_ID}\n\n"
        "ููููู ุงุณุชุฎุฏุงู ุงูุฃูุงูุฑ ุงูุชุงููุฉ:\n"
        "/unanswered - ุฑุคูุฉ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ\n"
        "/clear_unanswered - ูุณุญ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ\n"
        "/reply [ูุนุฑู ุงููุณุชุฎุฏู] [ุงูุฑุณุงูุฉ] - ููุฑุฏ ุนูู ูุณุชุฎุฏู ูุนูู\n"
        "/broadcast [ุงูุฑุณุงูุฉ] - ุงูุจุซ ุงูุฌูุงุนู ูุฌููุน ุงููุณุชุฎุฏููู\n"
        "/stats - ุฅุญุตุงุฆูุงุช ุงููุณุชุฎุฏููู\n"
        "ุฃู ุงุณุชุฎุฏุงู ุฃุฒุฑุงุฑ ุงูุฑุฏ ุนูุฏ ูุตูู ุณุคุงู ุฌุฏูุฏ"
    )

async def get_unanswered_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    if not unanswered_questions:
        await update.message.reply_text("ูุง ุชูุฌุฏ ุฃุณุฆูุฉ ุบูุฑ ูุฌุงุจุฉ ุญุงููุงู.")
        return
    
    message = "ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ:\n\n"
    for i, item in enumerate(unanswered_questions, 1):
        message += f"{i}. ุงูุณุคุงู: {item['question']}\n   ูู: {item['user_info']} (ID: {item['user_id']})\n\n"
    
    # ุฅุถุงูุฉ ุฃุฒุฑุงุฑ ููุฑุฏ ุงูุณุฑูุน
    keyboard = []
    for item in unanswered_questions:
        keyboard.append([InlineKeyboardButton(f"ุงูุฑุฏ ุนูู {item['user_info']}", callback_data=f"reply_{item['user_id']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

async def clear_unanswered_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    global unanswered_questions
    count = len(unanswered_questions)
    unanswered_questions = []
    
    await update.message.reply_text(f"ุชู ูุณุญ {count} ุณุคุงู ุบูุฑ ูุฌุงุจ.")

async def reply_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("ุงุณุชุฎุฏู ุงูุฃูุฑ ุจุงูุดูู: /reply [ูุนุฑู ุงููุณุชุฎุฏู] [ุงูุฑุณุงูุฉ]")
        return
    
    # ุงุณุชุฎุฑุงุฌ ูุนุฑู ุงููุณุชุฎุฏู ูู ุงูุฃูุฑ
    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("ูุนุฑู ุงููุณุชุฎุฏู ุบูุฑ ุตุญูุญ.")
        return
    
    # ุงุณุชุฎุฑุงุฌ ุงูุฑุณุงูุฉ (ูู ุงูุฃุฌุฒุงุก ุจุนุฏ ุงููุนุฑู)
    message = " ".join(context.args[1:])
    
    try:
        # ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูููุณุชุฎุฏู
        await context.bot.send_message(chat_id=user_id, text=f"๐จ ุฑุฏ ูู ุงููุณุคูู:\n\n{message}")
        await update.message.reply_text(f"โ ุชู ุฅุฑุณุงู ุงูุฑุฏ ุฅูู ุงููุณุชุฎุฏู {user_id}")
        
        # ุฅุฒุงูุฉ ุงูุณุคุงู ูู ูุงุฆูุฉ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ ุฅู ูุฌุฏ
        global unanswered_questions
        unanswered_questions = [q for q in unanswered_questions if q['user_id'] != user_id]
        
    except Exception as e:
        await update.message.reply_text(f"โ ูุดู ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ: {e}")

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = int(data.split('_')[1])
    
    if data.startswith('reply_'):
        # ุญูุธ ูุนุฑู ุงููุณุชุฎุฏู ููุฑุฏ ุนููู ูุงุญูุงู
        context.user_data['replying_to'] = user_id
        await query.edit_message_text(
            f"ุชู ุชุญุฏูุฏ ุงููุณุชุฎุฏู {user_id} ููุฑุฏ. ุฃุฑุณู ุฑุณุงูุฉ ุงูุฑุฏ ุงูุขู:"
        )
    elif data.startswith('ignore_'):
        # ุชุฌุงูู ุงูุณุคุงู
        global unanswered_questions
        unanswered_questions = [q for q in unanswered_questions if q['user_id'] != user_id]
        await query.edit_message_text(f"ุชู ุชุฌุงูู ุณุคุงู ุงููุณุชุฎุฏู {user_id}")

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None or update.effective_user.id != ADMIN_ID:
        return
    
    if 'replying_to' in context.user_data:
        user_id = context.user_data['replying_to']
        message = update.message.text
        
        try:
            # ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูููุณุชุฎุฏู
            await context.bot.send_message(chat_id=user_id, text=f"๐จ:\n{message}")
            await update.message.reply_text(f"โ ุชู ุฅุฑุณุงู ุงูุฑุฏ ุฅูู ุงููุณุชุฎุฏู {user_id}")
            
            # ุฅุฒุงูุฉ ุงูุณุคุงู ูู ูุงุฆูุฉ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ
            global unanswered_questions
            unanswered_questions = [q for q in unanswered_questions if q['user_id'] != user_id]
            
            # ูุณุญ ุญุงูุฉ ุงูุฑุฏ
            del context.user_data['replying_to']
            
        except Exception as e:
            await update.message.reply_text(f"โ ูุดู ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ: {e}")

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    if not context.args:
        await update.message.reply_text("ุงุณุชุฎุฏู ุงูุฃูุฑ ุจุงูุดูู: /broadcast [ุงูุฑุณุงูุฉ]")
        return
    
    # ุงุณุชุฎุฑุงุฌ ุงูุฑุณุงูุฉ
    message = " ".join(context.args)
    
    # ุชุญููู ุจูุงูุงุช ุงููุณุชุฎุฏููู
    user_data = load_user_data()
    
    if not user_data:
        await update.message.reply_text("ูุง ููุฌุฏ ูุณุชุฎุฏููู ูุณุฌููู ุจุนุฏ.")
        return
    
    # ุฅุฑุณุงู ุงูุฑุณุงูุฉ ูุฌููุน ุงููุณุชุฎุฏููู
    success_count = 0
    fail_count = 0
    
    await update.message.reply_text(f"ุฌุงุฑู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุฅูู {len(user_data)} ูุณุชุฎุฏู...")
    
    for user_id_str in user_data:
        try:
            await context.bot.send_message(chat_id=int(user_id_str), text=f"๐ข ุฅุดุนุงุฑ ูู Clear Smile:\n\n{message}")
            success_count += 1
        except Exception as e:
            logger.error(f"ูุดู ูู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุฅูู ุงููุณุชุฎุฏู {user_id_str}: {e}")
            fail_count += 1
    
    await update.message.reply_text(
        f"ุชู ุงูุงูุชูุงุก ูู ุงูุจุซ ุงูุฌูุงุนู:\n"
        f"โ ุนุฏุฏ ุงูุฑุณุงุฆู ุงููุฑุณูุฉ ุจูุฌุงุญ: {success_count}\n"
        f"โ ุนุฏุฏ ุงูุฑุณุงุฆู ุงููุงุดูุฉ: {fail_count}"
    )

async def get_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    if ADMIN_ID is None:
        await update.message.reply_text("ูู ูุชู ุชุนููู ูุณุคูู ุจุนุฏ. ุงุณุชุฎุฏู /setadmin ุฃููุงู.")
        return
    
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("ูุฐุง ุงูุฃูุฑ ูุชุงุญ ูููุณุคูู ููุท.")
        return
    
    # ุชุญููู ุจูุงูุงุช ุงููุณุชุฎุฏููู
    user_data = load_user_data()
    
    if not user_data:
        await update.message.reply_text("ูุง ููุฌุฏ ูุณุชุฎุฏููู ูุณุฌููู ุจุนุฏ.")
        return
    
    total_users = len(user_data)
    active_users = sum(1 for user in user_data.values() if user.get("interaction_count", 0) > 0)
    
    stats_message = (
        f"๐ ุฅุญุตุงุฆูุงุช ุงููุณุชุฎุฏููู:\n\n"
        f"โข ุฅุฌูุงูู ุนุฏุฏ ุงููุณุชุฎุฏููู: {total_users}\n"
        f"โข ุนุฏุฏ ุงููุณุชุฎุฏููู ุงููุดุทูู: {active_users}\n"
        f"โข ุนุฏุฏ ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุฌุงุจุฉ: {len(unanswered_questions)}\n\n"
        f"ูุฅุฑุณุงู ุฑุณุงูุฉ ุฌูุงุนูุฉุ ุงุณุชุฎุฏู ุงูุฃูุฑ /broadcast"
    )
    
    await update.message.reply_text(stats_message)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

def main():
    # ุงูุญุตูู ุนูู ุงูุชููู ูู ูุชุบูุฑ ุงูุจูุฆุฉ
    token = TELEGRAM_BOT_TOKEN
    
    if not token:
        raise RuntimeError("ุงูุฑุฌุงุก ูุถุน ุชููู ุงูุจูุช ูู ูุชุบูุฑ ุงูุจูุฆุฉ TELEGRAM_BOT_TOKEN")
    
    # ุจูุงุก ุงูุชุทุจูู
    application = ApplicationBuilder().token(token).build()
    
    # ุฅุถุงูุฉ handlers - ุงูุชุฑุชูุจ ููู!
    
    # 1. ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("cancel", cancel_keyboard))
    application.add_handler(CommandHandler("myid", get_my_id))
    # application.add_handler(CommandHandler("setadmin", set_admin))
    application.add_handler(CommandHandler("unanswered", get_unanswered_questions))
    application.add_handler(CommandHandler("clear_unanswered", clear_unanswered_questions))
    application.add_handler(CommandHandler("broadcast", broadcast_message))
    application.add_handler(CommandHandler("stats", get_user_stats))
    application.add_handler(CommandHandler("reply", reply_to_user))
    
    # 2. ูุนุงูุฌ ุงูุงุณุชุนูุงูุงุช (Callbacks)
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern=r"^(reply|ignore)_\d+"))
    
    # 3. ูุนุงูุฌ ุงููุต ุงูุนุงู (ููุฃุณุฆูุฉ) - ูุฌุจ ุฃู ูููู ุงูุฃุฎูุฑ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer))
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ุงูุฃุฎุทุงุก
    application.add_error_handler(error_handler)
    
    # ุจุฏุก ุงูุจูุช
    logger.info("ุงูุจูุช ูุนูู...")
    application.run_polling()

if __name__ == "__main__":
    main()